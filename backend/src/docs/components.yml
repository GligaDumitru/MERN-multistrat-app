components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user
    Project:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageLink:
          type: string
        description:
          type: string
        address:
          type: string
        managedBy:
          type: string
        subtasks:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
      example:
        id: 5ebac534954b54139806c112
        managedBy: 5ebac534954b54139806c112
        name: Project Name
        imageLink: wwww.placeholder.com/500
        address: Iasi, Romania
        description: description here
        subtasks: [{ "name": "frontend_development" }]
    Timesheet:
      type: object
      properties:
        id:
          type: string
        startDate:
          type: string
        userId:
          type: string
        managedBy:
          type: string
        status:
          type: string
        tasks:
          type: array
          items:
            type: object
            properties:
              projectId:
                type: string
              subtaskId:
                type: string
              days:
                type: array
                items:
                  type: string
      example:
        id: 5ebac534954b54139806c112
        managedBy: 5ebac534954b54139806c112
        startDate: 03/01/2022
        userId: 5ebac534954b54139806c112
        status: open
        tasks: [{ "projectId": "5ebac534954b54139806c112", "subtaskId":"frontend_development", "days":["0", "0"] }]
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/Token"
        refresh:
          $ref: "#/components/schemas/Token"

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: Email already taken
    DuplicateNameProject:
      description: Project name already taken
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: Name already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
